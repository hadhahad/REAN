ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(new_pred_bc)[1], slope = coef(new_pred_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 30))
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 30))
# Nový model s použitím Box-Coxovy transformace.
medv_lm_bc <- update(medv_lm, . ~ boxCoxVariable(crim))
summary(medv_lm_bc)
avPlots(medv_lm_bc)
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 30))
# Nový model s použitím Box-Coxovy transformace.
medv_lm_bc <- update(medv_lm, . ~ . + boxCoxVariable(crim))
summary(medv_lm_bc)
ggplot(data, aes(x=boxCoxVariable(crim), y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 30))
ggplot(data, aes(x=boxCoxVariable(crim), y=boxCoxVariable(medv)) +
ggplot(data, aes(x=boxCoxVariable(crim), y=boxCoxVariable(medv))) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 30))
avPlots(medv_lm_bc)
avPlots(medv_lm_bc)
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 30))
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Box-Cox Transformation") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
# Nový model s použitím Box-Coxovy transformace.
medv_lm_bc <- update(medv_lm, . ~ boxCoxVariable(crim))
summary(medv_lm_bc)
avPlots(medv_lm_bc)
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col='darkblue') +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Box-Cox Transformation") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], aes(colour="Box-Cox")) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Box-Cox Transformation") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
?boxCox
# Use SLID data from car package
? SLID
summary(SLID)
SLID <- na.omit(SLID) # remove NA's
summary(SLID)
mod0 <- lm(wages ~ sex + age + education, data=SLID)
boxcox(mod0)
mod_bc <- update(mod0, . ~ . + boxCoxVariable(wages))
summary(mod_bc)
avPlots(mod_bc)  # constructed-variable plot
?boxCoxVariable
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], aes(colour="Box-Cox")) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Box-Cox Transformation") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
# Nový model s použitím Box-Coxovy transformace.
medv_lm_bc <- update(medv_lm, . ~ boxCoxVariable(crim))
summary(medv_lm_bc)
avPlots(medv_lm_bc)
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], aes(colour="Box-")) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Box-Cox Transformation") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col="darkblue") +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Box-Cox Transformation") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
summary(medv_lm_bc)
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col="darkblue") +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Box-Cox Transformation") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
boxCoxVariable(crim)
?boxCoxVariable
# Nový model s použitím Box-Coxovy transformace.
medv_lm_bc <- update(medv_lm, . ~ boxCoxVariable(medv))
summary(medv_lm_bc)
ggplot(data, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_abline(intercept = coef(medv_lm_bc)[1], slope = coef(medv_lm_bc)[2], col="darkblue") +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Box-Cox Transformation") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 50))
summary(medv_lm_bc)
### Načtení potřebných knihoven ###
needed.libraries <- c('data.table','car','MASS','ggplot2','ISLR','graphics','effects','lattice','segmented','leaps')
for(libs in needed.libraries) require(libs, character.only = TRUE)
leapsstatCp <- leaps(x=data[,c(1,2,4:6,8:13)], y=data[,14], names=names(data)[c(1,2,4:6,8:13)], method="r2")
CpParams <- leapsstatCp$size
CpValues <- leapsstatCp$Cp
plot(CpValues ~ CpParams)
CpParams
CpValues
CpParams <- leapsstatCp$size
CpValues <- leapsstatCp$Cp
plot(CpValues ~ CpParams)
leapsstatCp$Cp
CpValues <- leapsstatCp$r2
plot(CpValues ~ CpParams)
leapsstatCp
summary(data)
leapsstatCp <- leaps(x=data[,c(1,2,4:6,8:13)], y=data[,14], names=names(data)[c(1,2,4:6,8:13)], method=c("r2","Cp"))
leapsstatCp
leapsstatCp <- leaps(x=data[,c(1,2,4:6,8:13)], y=data[,14], names=names(data)[c(1,2,4:6,8:13)], method="r2")
leapsstatCp
leapsstatCp <- leaps(x=data[,c(1,2,4:6,8:13)], y=data[,14], names=names(data)[c(1,2,4:6,8:13)], method="Cp")
leapsstatr2 <- leaps(x=data[,c(1,2,4:6,8:13)], y=data[,14], names=names(data)[c(1,2,4:6,8:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
r2Params <- leapsstatr2$size; r2Values <- leapsstatr2$r2
leapsstatr2
leapsstatCp <- leaps(x=data[,c(1,2,3,4:6,7,8:13)], y=data[,14], names=names(data)[c(1,2,4:6,8:13)], method="Cp")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
plot(CpValues ~ CpParams)
leapsstatCp <- leaps(x=data[,c(1,2,3,4:6,7,8:13)], y=data[,14], names=names(data)[c(1,2,4:6,8:13)], method="Cp")
leapsstatr2 <- leaps(x=data[,c(1,2,4:6,8:13)], y=data[,14], names=names(data)[c(1,2,4:6,8:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
CpValues
r2Params <- leapsstatCp$size; r2Values <- leapsstatCp$r2
r2Values
leapsstatCp
leapsstatCp$r2
leapsstatCp <- leaps(x=data[,c(1:13)], y=data[,14], names=names(data)[c(1:13)], method="Cp")
leapsstatr2 <- leaps(x=data[,c(1:13)], y=data[,14], names=names(data)[c(1:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
r2Params <- leapsstatr2$size; r2Values <- leapsstatr2$r2
plot(CpValues ~ CpParams)
ggplot(data, aes(x=CpParams, y=CpValues)) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("aaa") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 4))
CpParams
CpValues
ggplot(data, aes(x=CpParams, y=CpValues)) +
geom_point(size=1, alpha=0.7) +
labs(color="Legend:") +
theme_bw() +
xlab("Number of Variables") +
ylab("Value") +
ggtitle("aaa") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 4))
dim(CpParams)
leapsstatCp <- leaps(x=data[,c(1:13)], y=data[,14], names=names(data)[c(1:13)], method="Cp")
leapsstatr2 <- leaps(x=data[,c(1:13)], y=data[,14], names=names(data)[c(1:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
r2Params <- leapsstatr2$size; r2Values <- leapsstatr2$r2
CpParams
CpValues
ggplot(data, aes(x=CpParams, y=CpValues)) +
geom_point(size=1, alpha=0.7) +
labs(color="Legend:") +
theme_bw() +
xlab("Number of Variables") +
ylab("Value") +
ggtitle("aaa") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 4))
CpParams
CpValues
plot(CpValues ~ CpParams)
dim(CpParams)
ggplot(data, aes(x=CpParams, y=CpValues)) +
geom_point(size=1, alpha=0.7) +
labs(color="Legend:") +
theme_bw() +
xlab("Number of Variables") +
ylab("Value") +
ggtitle("aaa") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 4))
dim(CpParams)
dim(CpParams)
CpParams
dim(as.vector(CpParams))
typeof(CpParams)
ggplot(data, aes(CpValues ~ CpParams)) +
geom_point(size=1, alpha=0.7) +
labs(color="Legend:") +
theme_bw() +
xlab("Number of Variables") +
ylab("Value") +
ggtitle("aaa") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 4))
CpParams
CpParams[1]
CpParams[1]
CpParams[2]
which(CpValues <100)
which(CpParams, CpValues <100)
opar <- par(mfrow=c(2,1))
plot(CpValues ~ CpParams)
plot(r2Values ~ r2Params)
opar <- par(mfrow=c(1,2))
plot(CpValues ~ CpParams)
plot(r2Values ~ r2Params)
CpValues
CpValues[61]
leapsstatCp
r2Values
# Vybereme proměnné s indexy 4, 5, 6, 8, 11, 13.
names(data)[c(4, 5, 6, 8, 11, 13)]
leaps <- regsubsets(log(medv) ~ chas + nox + rm + dis + ptratio + lstat, data, nbest=10)
leaps <- regsubsets(log(medv) ~ chas + nox + rm + dis + ptratio + lstat, data, nbest=10)
summary(leaps)
plot(leaps,scale="Cp")
subsets(leaps, statistic="aic")
subsets(leaps, statistic="bic")
subsets(leaps, statistic="r2")
subsets(leaps, statistic="adjr2")
subsets(leaps, statistic="adjr2")
opar <- par(mfrow=c(2,2))
plot(leaps,scale="Cp")
plot(leaps,scale="adjr2")
subsets(leaps, statistic="Cp")
subsets(leaps, statistic="bic")
subsets(leaps, statistic="adjr2")
AIC(leaps)
model_final <- lm(log(medv) ~ rm + ptratio + lstat, data)
summary(moded_final)
model_final <- lm(log(medv) ~ rm + ptratio + lstat, data)
summary(moded_final)
summary(model_final)
model_final <- step(log(medv) ~ rm + ptratio + lstat, data)
model_final <- step(medv ~ rm + ptratio + lstat, data)
ll  <- step(model_final)
ll
summary(ll)
summary(boston_lm.1)
boston_all_lm <- lm(log(medv) ~ ., data)
summary(boston_all_lm)  # Model se všemi proměnnými najednou je přetížený.
boston_lm.1 <- step(boston_all_lm)
summary(boston_lm.1)
?step
AIC
?AIC
# Otestujeme náš výběr pomocí 'step' (Akaike).
step(model_final)
# Otestujeme náš výběr pomocí 'step' (Akaike).
summary(step(model_final))
summary(model_final)
op <- par(mfrow=c(2,2))
plot(model_final)
par(opar)
summary(data$medv)
summary(as.factor(data$medv))
as.factor(data$medv)
summary(as.factor(data$medv, data$medv<10))
summary(as.factor(data$medv[data$medv<10]))
summary(as.factor(data$medv[data$medv>10]))
summary(as.factor(data$medv[data$medv>20]))
summary(as.factor(data$medv[data$medv<20]))
summary(as.factor(data$medv[data$medv<20]))
summary(as.factor(data$medv[data$medv>=20]))
summary(as.factor(data$medv[data$medv<20]))
summary(as.factor(data$medv[data$medv>=20]))
summary(as.factor(data$medv[data$medv<20]))
summary(as.factor(data$medv[data$medv>=20]))
# Tabulka četností jednotlivých hodnot odezvy 'medv' ukazuje na to, že
median(data$medv)
data[which(data$medv = 50)]
data[which(data$medv = 50),]
# Tabulka četností jednotlivých hodnot odezvy 'medv' ukazuje na to, že
# by hodnoty rovné 50 mohly vzniknout useknutím nebo chybně.
# Proto si je dovolíme odstranit.
data <- data[which(data$medv == 50),]
data
data <- Boston
# Tabulka četností jednotlivých hodnot odezvy 'medv' ukazuje na to, že
# by hodnoty rovné 50 mohly vzniknout useknutím nebo chybně.
# Proto si je dovolíme odstranit.
newdata <- Boston[which(Boston$medv == 50),]
newdata
# Tabulka četností jednotlivých hodnot odezvy 'medv' ukazuje na to, že
# by hodnoty rovné 50 mohly vzniknout useknutím nebo chybně.
# Proto si je dovolíme odstranit.
newdata <- Boston[which(Boston$medv 1= 50),]
# Tabulka četností jednotlivých hodnot odezvy 'medv' ukazuje na to, že
# by hodnoty rovné 50 mohly vzniknout useknutím nebo chybně.
# Proto si je dovolíme odstranit.
newdata <- Boston[which(Boston$medv != 50),]
newdata
median(Boston$medv)
median(newdata$medv)
dev.off()
boston_all_lm <- lm(log(medv) ~ ., newdata)
summary(boston_all_lm)  # Model se všemi proměnnými najednou je přetížený.
### Pro výběr ze všech možných vysvětlujících proměnných použijeme balík 'leaps' a kritéria Cp/r2. ###
summary(newdata)
leapsstatCp <- leaps(x=newdata[,c(1:13)], y=newdata[,14], names=names(newdata)[c(1:13)], method="Cp")
leapsstatr2 <- leaps(x=newdata[,c(1:13)], y=newdata[,14], names=names(newdata)[c(1:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
r2Params <- leapsstatr2$size; r2Values <- leapsstatr2$r2
opar <- par(mfrow=c(1,2))
plot(CpValues ~ CpParams)
plot(r2Values ~ r2Params)
par(opar)
# Vybereme proměnné s indexy 4, 5, 6, 8, 11, 13.
names(Boston)[c(4, 5, 6, 8, 11, 13)]
leaps <- regsubsets(log(medv) ~ chas + nox + rm + dis + ptratio + lstat, newdata, nbest=10)
summary(leaps)
opar <- par(mfrow=c(2,2))
plot(leaps,scale="Cp")
plot(leaps,scale="adjr2")
subsets(leaps, statistic="bic")
subsets(leaps, statistic="adjr2")
par(opar)
dev.off()
### Nakonec zvolíme model s proměnnými r-p-l. ###
model_final <- lm(log(medv) ~ rm + ptratio + lstat, newdata)
# Otestujeme náš výběr pomocí 'step' (Akaike).
summary(step(model_final))  # Z AIC vyplývá, že všechny vybrané proměnné jsou signifikantní.
summary(model_final)  # F-statistic také dává dobrý výsledek.
op <- par(mfrow=c(2,2))
plot(model_final)
View(newdata)
View(newdata)
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
par(opar)
Boston[-c(1),]
Boston[-c(2),]
boston_all_lm <- lm(medv ~ ., newdata)
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(medv ~ ., Boston[-c(413, 366, 368),])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(medv ~ ., Boston[-c(413),])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(medv ~ ., Boston[-c(),])
boston_all_lm <- lm(medv ~ ., Boston[,])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(medv ~ ., Boston[-c(413, 369, 373, 365),])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(medv ~ ., Boston[-c(413, 369, 372, 365),])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(medv ~ ., Boston[-c(413, 369, 372, 365, 373),])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(medv ~ ., Boston[-c(413, 369, 372, 365, 373, 366, 370, 371),])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(medv ~ ., Boston[-c(413, 369, 372, 365, 373, 366, 370, 371,368),])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
boston_all_lm <- lm(log(medv) ~ ., Boston[-c(413, 369, 372, 365, 373, 366, 370, 371,368),])
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
opar <- par(mfrow=c(2,2))
boston_all_lm <- lm(log(medv) ~ ., newdata)
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
pairs(~(.), newdata,  main="Basic Scatterplot Matrix")
dev.off()
boston_all_lm <- lm(log(medv) ~ ., newdata)
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
par(opar)
summary(boston_all_lm)  # Model se všemi proměnnými najednou je přetížený.
### Pro výběr ze všech možných vysvětlujících proměnných použijeme balík 'leaps' a kritéria Cp/r2. ###
summary(newdata)
leapsstatCp <- leaps(x=newdata[,c(1:13)], y=newdata[,14], names=names(newdata)[c(1:13)], method="Cp")
leapsstatr2 <- leaps(x=newdata[,c(1:13)], y=newdata[,14], names=names(newdata)[c(1:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
r2Params <- leapsstatr2$size; r2Values <- leapsstatr2$r2
opar <- par(mfrow=c(1,2))
plot(CpValues ~ CpParams)
plot(r2Values ~ r2Params)
### Nakonec zvolíme model s proměnnými r-p-l. ###
model_final <- lm(log(medv) ~ rm + ptratio + lstat, newdata)
# Otestujeme náš výběr pomocí 'step' (Akaike).
summary(step(model_final))  # Z AIC vyplývá, že všechny vybrané proměnné jsou signifikantní.
summary(model_final)  # F-statistic také dává dobrý výsledek.
op <- par(mfrow=c(2,2))
plot(model_final)
par(opar)
### Pro výběr ze všech možných vysvětlujících proměnných použijeme balík 'leaps' a kritéria Cp/r2. ###
summary(newdata)
summary(as.factor(Boston$medv[Boston$medv>=20]))
summary(as.factor(Boston$medv[Boston$medv>=40]))
summary(as.factor(Boston$medv[Boston$medv>=20 & Boston$medv[Boston$medv<=40]))
summary(as.factor(Boston$medv[Boston$medv>=20] & Boston$medv[Boston$medv<=40]))
Boston$medv[Boston$medv>=20]
summary(as.factor(Boston$medv[Boston$medv>=20 & Boston$medv<=40]))
summary(as.factor(Boston$medv[Boston$medv>=40]))
shapiro.test(residuals(model_final))
# Shapiro-Wilk Normality Test pro normalitu reziduí dává dobrou p-hodnotu.
bptest(model_final, ~ rm*ptratio*lstat + I(rm^2) + I(ptratio^2) + I(lstat^2), data = newdata)
library(lmtest)
# Shapiro-Wilk Normality Test pro normalitu reziduí dává dobrou p-hodnotu.
bptest(model_final, ~ rm*ptratio*lstat + I(rm^2) + I(ptratio^2) + I(lstat^2), data = newdata)
# Repeating measurement - compare factor model
# Test submodel with factor variable with less DF
with(cars,table(speed))
anova(m1_f<-lm(dist/speed~factor(speed),data=cars))
anova(m1_c<-lm(dist/speed~speed,data=cars))
anova(m1_c,m1_f)
# for dependence on mean value
# Breusch-Pagan test statistic
bptest(m1_c)
m1_c
bptest(model_final)
### Nakonec zvolíme model s proměnnými r-p-l. ###
model_final <- lm(log(medv) ~ crim + rm + ptratio + lstat, newdata)
# Otestujeme náš výběr pomocí 'step' (Akaike).
summary(step(model_final))  # Z AIC vyplývá, že všechny vybrané proměnné jsou signifikantní.
summary(model_final)  # F-statistic také dává dobrý výsledek.
# Na grafu Residuals vs. Fitted lze pozorovat symetrii.
op <- par(mfrow=c(2,2))
plot(model_final)
par(opar)
# Shapiro-Wilk Normality Test pro normalitu reziduí dává dobrou p-hodnotu.
shapiro.test(residuals(model_final))
bptest(model_final)
### Nakonec zvolíme model s proměnnými r-p-l. ###
model_final <- lm(log(medv) ~ rm + ptratio + lstat, newdata)
# Otestujeme náš výběr pomocí 'step' (Akaike).
summary(step(model_final))  # Z AIC vyplývá, že všechny vybrané proměnné jsou signifikantní.
summary(model_final)  # F-statistic také dává dobrý výsledek.
# Na grafu Residuals vs. Fitted lze pozorovat symetrii.
op <- par(mfrow=c(2,2))
plot(model_final)
par(opar)
# Shapiro-Wilk Normality Test pro normalitu reziduí dává dobrou p-hodnotu.
shapiro.test(residuals(model_final))
?bptest
