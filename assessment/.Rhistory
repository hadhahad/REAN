plot(r2Values ~ r2Params)
par(opar)
# Vybereme proměnné s indexy 1, 5, 6, 8, 9, 10, 11, 13 (podle grafů je vidět, že existují i lepší
# modely, ale chceme dobrý poměr cena/výkon.
names(Boston)[c(1, 5, 6, 8, 9, 10, 11, 13)]
leaps <- regsubsets(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, data = newBoston, nbest=10)
summary(leaps)
plot(leaps,scale="Cp")
plot(leaps,scale="adjr2")
subsets(leaps, statistic="bic")
plot(leaps,scale="Cp")
subsets(leaps, statistic="bic")
boston_lm_AIC <- stepAIC(regsubsets(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, data = newdata)
summary(boston_lm_AIC)
summary(boston_lm_AIC)
boston_lm_AIC <- stepAIC(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, data = newdata)
boston_lm_AIC <- stepAIC(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, data = newBoston)
boston_lm_AIC <- stepAIC(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, newBoston)
boston_lm_AIC <- stepAIC(boston_lm_final)
boston_lm_final <- lm(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, data = newBoston)
boston_lm_AIC <- stepAIC(boston_lm_final)
summary(boston_lm_AIC)
# Na grafu Residuals vs. Fitted lze pozorovat symetrii.
op <- par(mfrow=c(2,2))
plot(boston_lm_final)
par(opar)
# Z Shapiro-Wilkova testu neplyne normalita reziduí.
shapiro.test(residuals(boston_lm_final))
# Breusch-Paganův test ukazuje na heteroskedascicitu.
bptest(model_final)
# Inflace variance pro vybraný model také není velka (<1.7).
vif(boston_lm_final)
# Z diagramu níže a z tvaru kovarianční matice vyplývá, že mezi
# vybranými proměnnými není významná kolinearita. Vzhledem ke korelacím
# ostatních proměnných si dovolíme říct, že proměnné byly vybrány relativně dobře.
# Lze ale mezi zvolenými proměnnými pozorovat jakousi nelineární závislost.
pairs(medv ~ rm + ptratio + lstat, data = newdata)
cor(cbind(newdata$crim,newdata$zn,newdata$indus,newdata$chas,newdata$nox,
newdata$rm,newdata$age,newdata$dis,newdata$rad,newdata$tax,
newdata$black,newdata$ptratio,newdata$lstat))
# Inflace variance pro vybraný model je příliš velká pro pro.
vif(boston_lm_final)
# Zkusíme vyhodit proměnnou 'rad':
boston_lm_final <- update(boston_lm_final, . ~ -rad)
boston_lm_final
# Zkusíme vyhodit proměnnou 'rad':
boston_lm_final <- update(boston_lm_final, . ~ . -rad)
boston_lm_final <- lm(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, data = newBoston)
# Zkusíme vyhodit proměnnou 'rad':
boston_lm_final <- update(boston_lm_final, . ~ . -rad)
# Inflace variance pro vybraný model je příliš velká pro proměnné 'rad' a 'tax'.
vif(boston_lm_final)
#
summary(boston_lm_final)
# Zkusíme vyhodit proměnnou 'rad':
boston_lm_final <- update(boston_lm_final, . ~ . -rad - tax)
vif(boston_lm_final)
#
summary(boston_lm_final)
vif(boston_lm_final)
# vif už dává dobrý výsledek, ale na druhou stranu teď proměnná 'tax' už není signifikantní.
summary(boston_lm_final)
boston_lm_final <- update(boston_lm_final, . ~ . - tax)
# Index podmíněnosti je o hodně menší 30
# (wiki: "If the condition number is above 30, the regression
# may have significant multicollinearity").
kappa(cor(cbind(newdata$rm,newdata$ptratio,newdata$lstat)),exact=T)
# vif už dává dobrý výsledek, ale na druhou stranu teď proměnná 'tax' už není signifikantní.
summary(boston_lm_final)
# Inflace variance pro vybraný model je příliš velká pro proměnné 'rad' a 'tax'.
vif(boston_lm_final)
# Zkusíme ubrat proměnnou 'rad':
boston_lm_final <- update(boston_lm_final, . ~ . - rad)
vif(boston_lm_final)
# vif už dává dobrý výsledek, ale na druhou stranu teď proměnná 'tax' už není signifikantní.
summary(boston_lm_final)
boston_lm_final <- update(boston_lm_final, . ~ . - tax)
# Tedy ji také z finálního modelu ubereme.
summary(boston_lm_final)
# Index podmíněnosti je o hodně menší 30
# (wiki: "If the condition number is above 30, the regression
# may have significant multicollinearity").
kappa(cor(cbind(newdata$rm,newdata$ptratio,newdata$lstat)),exact=T)
# Index podmíněnosti je o hodně menší 30
# (wiki: "If the condition number is above 30, the regression
# may have significant multicollinearity").
kappa(cor(cbind(newBoston$crim, newBoston$nox, newBoston$rm, newBoston$dis,
newBoston$ptratio, newBoston$lstat)),exact=T)
# Zvolený model zahrnuje v sobě proměnnou 'nox'.
summary(boston_lm_final)
opar <- par(mfrow=c(2,2))
plot(boston_lm_final)
par(opar)
coef(boston_lm_final)[2]
exp_bet1 <- exp(coef(boston_lm_final)[2])
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_bet1)*100
exp_beta1 <- exp(coef(boston_lm_final)[2]*0.1)
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
coef(boston_lm_final)[2]*0.1
exp_beta1 <- exp(coef(boston_lm_final)[2]*0.1)
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
exp_beta1 <- exp(coef(boston_lm_final)[2])
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
exp_beta1 <- exp(coef(logboston_lm)[2]*0.1)
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+0.1]/E[Y|X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti
# při nárustu 'nox' o 0.1.
(1-exp_beta1)*100
logboston_lm
### (1) Uděláme logaritmickou transformaci odezvy 'medv'. ###
logboston_lm <- lm(log(medv) ~ nox, newBoston)
summary(logboston_lm)
### (1) Uděláme logaritmickou transformaci odezvy 'medv'. ###
logboston_lm <- lm(log(medv) ~ nox, newBoston)
logboston_lm)[2]
coef(logboston_lm)[2]
exp_beta1 <- exp(coef(logboston_lm)[2]*0.1)
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+0.1]/E[Y|X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti
# při nárustu 'nox' o 0.1.
(1-exp_beta1)*100
# Zvolený model zahrnuje v sobě proměnnou 'nox'.
summary(boston_lm_final)
opar <- par(mfrow=c(2,2))
plot(boston_lm_final)
par(opar)
exp_beta1 <- exp(coef(boston_lm_final)[2])
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
coef(boston_lm_final)[3]
exp_beta1 <- exp(coef(boston_lm_final)[3])
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
exp_beta1 <- exp(coef(boston_lm_final)[3]*0.1)
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+0.1, ...]/E[Y|X=x, ...].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
### Výsledný model:
summary(boston_lm_final)
op <- par(mfrow=c(2,2))
plot(boston_lm_final)
par(opar)
sigma(boston_lm_final)
??sigma
sigmaHat(boston_lm_final)
# Z Shapiro-Wilkova testu neplyne normalita reziduí.
shapiro.test(residuals(boston_lm_final))
# Breusch-Paganův test ukazuje na heteroskedascicitu.
bptest(boston_lm_final)
# Podívejme se na partial-regression grafy:
avPlots(model_final_crim)
### Načtení potřebných knihoven ###
needed.libraries <- c('data.table','car','MASS','ggplot2',
'ISLR','graphics','effects','lattice',
'segmented','leaps','splines','psych',
'corrgram','forecast','lmtest')
for(libs in needed.libraries) require(libs, character.only = TRUE)
# Odstraníme outliery
with(Boston, table(medv))
newBoston <- Boston[which(Boston$medv != 50),]
# Scatter plot
p <- ggplot(newBoston, aes(x=nox, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_smooth(method = 'lm', formula = y ~ x, aes(colour="Linear"))  +
geom_smooth(method = 'loess', formula = y ~ x, aes(colour="Loess")) +
scale_colour_manual(name="Smoothers", values=c("blue", "red")) +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes and Nitrogen Oxides Concentration") +
coord_cartesian(xlim=c(0.385, 0.8710), ylim=c(0, 50))
p
# Odstraníme outliery
with(Boston, table(medv))
newBoston <- Boston[which(Boston$medv != 50),]
# Scatter plot
p <- ggplot(newBoston, aes(x=nox, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_smooth(method = 'lm', formula = y ~ x, aes(colour="Linear"))  +
geom_smooth(method = 'loess', formula = y ~ x, aes(colour="Loess")) +
scale_colour_manual(name="Smoothers", values=c("blue", "red")) +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes and Nitrogen Oxides Concentration") +
coord_cartesian(xlim=c(0.385, 0.8710), ylim=c(0, 50))
p
# Podívejme se na jednoduchý lineární model:
boston_lm <- lm(medv ~ nox, data = newBoston)
summary(boston_lm)
opar <- par(mfrow=c(2,2))
plot(boston_lm)
par(opar)
### (1) Uděláme logaritmickou transformaci odezvy 'medv'. ###
logboston_lm <- lm(log(medv) ~ nox, newBoston)
summary(logboston_lm)
opar <- par(mfrow=c(2,2))
plot(logboston_lm)
par(opar)
### (2) Graf s regresní křivkou pro nový model a konfidenčními intervaly na hladině významnosti 5%: ###
new_nox <- data.frame(nox = seq(0.3850,0.8710,0.0009925))
new_conf = predict(logboston_lm, newdata = new_nox, interval = "confidence", level=0.95)
new_pred = predict(logboston_lm, newdata = new_nox, interval = "prediction", level=0.95)
logtrans_p1<- ggplot(newBoston, aes(x=nox, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0.385, 0.8710), ylim=c(1.5, 4))
logtrans_p1
summary(logboston_lm)
opar <- par(mfrow=c(2,2))
plot(logboston_lm)
par(opar)
### (2) Graf s regresní křivkou pro nový model a konfidenčními intervaly na hladině významnosti 5%: ###
new_nox <- data.frame(nox = seq(0.3850,0.8710,0.0009925))
new_conf = predict(logboston_lm, newdata = new_nox, interval = "confidence", level=0.95)
new_pred = predict(logboston_lm, newdata = new_nox, interval = "prediction", level=0.95)
logtrans_p1<- ggplot(newBoston, aes(x=nox, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0.385, 0.8710), ylim=c(1.5, 4))
logtrans_p1
### (3) Porovnáme naši transformaci s transformací navrženou Box-Coxem: ###
dev.off()
# Log-věrohodnostní profil Box-Coxovy transformace:
boxcox(boston_lm)
# Nový model s použitím Box-Coxovy transformace.
lambda <- BoxCox.lambda(Boston$medv)
medv_bc <- BoxCox(Boston$medv, lambda)
boston_lm_bc <- lm(medv_bc ~ nox, Boston)
summary(boston_lm_bc)
install.packages("forecast")
# Nakonec se podíváme na chování reziduí obou modelů:
opar <- par(mfrow=c(2,2))
plot(boston_lm_bc)  # Box-Coxova transformace pro \lambda=-0.2380317
plot(logboston_lm)  # Logaritmická transformace odezvy
plot(boston_lm_bc)  # Box-Coxova transformace pro \lambda=-0.2380317
plot(logboston_lm)  # Logaritmická transformace odezvy
par(opar)
# Ještě jednou se podívejme na logaritmickou transformaci odezvy 'medv':
logtrans_p1
exp_beta1 <- exp(coef(logboston_lm)[2]*0.1)
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+0.1]/E[Y|X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti
# při nárustu 'nox' o 0.1.
(1-exp_beta1)*100
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+0.1]/E[Y|X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti
# při nárůstu 'nox' o 0.1.
(1-exp_beta1)*100
dev.off()
new_nox <- data.frame(nox = seq(0.3850,0.8710,0.0009925))
### (1) Lineární transformace. ###
lin_boston_lm <- lm(medv ~ poly(nox, degree=1, raw=TRUE), data = newBoston)
summary(lin_boston_lm)
new_boston_linear <- predict(lin_boston_lm, newdata = new_nox)
crPlots(lin_boston_lm)
### (2) Kvadratická polynomiální transformace. ###
quadratic_boston_lm <- lm(medv ~ poly(nox, degree=2, raw=TRUE), data = newBoston)
summary(quadratic_boston_lm)
new_boston_quadratic <- predict(quadratic_boston_lm, newdata = new_nox)
crPlots(quadratic_boston_lm)
### (3) Kubická polynomiální transformace. ###
cubic_boston_lm <- lm(medv ~ poly(nox, degree=3, raw=TRUE), data = newBoston)
summary(cubic_boston_lm)
new_boston_cubic <- predict(cubic_boston_lm, newdata = new_nox)
crPlots(cubic_boston_lm)
### (4) Splines. ###
splines_boston_lm <- lm(medv ~ bs(nox,knots=c(0.485,0.695),degree=1,Boundary.knots=c(0.385, 0.8710)), data = newBoston)
summary(splines_boston_lm)
new_boston_splines <- predict(splines_boston_lm, newdata = new_nox)
# Zobrazíme si tyto transformace:
transf_plot <- ggplot(newBoston, aes(x=nox, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_line(aes(x=new_nox, y=new_boston_linear, colour="Linear Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_quadratic, colour="Quadratic Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_cubic, colour="Cubic Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_splines, colour="Splines Transformation")) +
labs(color="Lines:") +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Transformations of the Dependant Variable - Boston Dataset") +
coord_cartesian(xlim=c(0.385, 0.8710), ylim=c(0, 50))
transf_plot
summary(quadratic_boston_lm)
new_boston_quadratic <- predict(quadratic_boston_lm, newdata = new_nox)
crPlots(quadratic_boston_lm)
### (3) Kubická polynomiální transformace. ###
cubic_boston_lm <- lm(medv ~ poly(nox, degree=3, raw=TRUE), data = newBoston)
summary(cubic_boston_lm)
new_boston_cubic <- predict(cubic_boston_lm, newdata = new_nox)
crPlots(cubic_boston_lm)
### (4) Splines. ###
splines_boston_lm <- lm(medv ~ bs(nox,knots=c(0.485,0.695),degree=1,Boundary.knots=c(0.385, 0.8710)), data = newBoston)
summary(splines_boston_lm)
new_boston_splines <- predict(splines_boston_lm, newdata = new_nox)
# Zobrazíme si tyto transformace:
transf_plot <- ggplot(newBoston, aes(x=nox, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_line(aes(x=new_nox, y=new_boston_linear, colour="Linear Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_quadratic, colour="Quadratic Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_cubic, colour="Cubic Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_splines, colour="Splines Transformation")) +
labs(color="Lines:") +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Transformations of the Dependant Variable - Boston Dataset") +
coord_cartesian(xlim=c(0.385, 0.8710), ylim=c(0, 50))
transf_plot
### Podívejme se na rezidua modelů. ###
opar <- par(mfrow=c(2,2))
plot(lin_boston_lm) # Tento model nesplňuje symetrii reziduí (je přítomná nelineární závislost) ani jejich normalitu.
plot(quadratic_boston_lm)
plot(cubic_boston_lm)
plot(splines_boston_lm)
par(opar)
### Vybereme model 'splines_boston_lm', ale provedeme pro něj navíc logaritmickou transformaci odezvy. ###
opar <- par(mfrow=c(2,2))
logsplines_boston_lm <- lm(log(medv) ~ bs(nox,knots=c(0.485,0.695),degree=1,Boundary.knots=c(0.385, 0.8710)), data = newBoston)
summary(logsplines_boston_lm)
# Logaritmizací odezvy jsme se docíleli zvětšení koeficientu determinace a zlepšení tvaru Q-Q plotu.
plot(logsplines_boston_lm)
par(opar)
logsplines_boston_lm <- lm(log(medv) ~ bs(nox,knots=c(0.695),degree=1,Boundary.knots=c(0.385, 0.8710)), data = newBoston)
summary(logsplines_boston_lm)
### (4) Splines. ###
splines_boston_lm <- lm(medv ~ bs(nox,knots=c(0.695),degree=1,Boundary.knots=c(0.385, 0.8710)), data = newBoston)
summary(splines_boston_lm)
new_boston_splines <- predict(splines_boston_lm, newdata = new_nox)
# Zobrazíme si tyto transformace:
transf_plot <- ggplot(newBoston, aes(x=nox, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_line(aes(x=new_nox, y=new_boston_linear, colour="Linear Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_quadratic, colour="Quadratic Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_cubic, colour="Cubic Transformation")) +
geom_line(aes(x=new_nox, y=new_boston_splines, colour="Splines Transformation")) +
labs(color="Lines:") +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Transformations of the Dependant Variable - Boston Dataset") +
coord_cartesian(xlim=c(0.385, 0.8710), ylim=c(0, 50))
transf_plot
### Podívejme se na rezidua modelů. ###
opar <- par(mfrow=c(2,2))
plot(lin_boston_lm) # Tento model nesplňuje symetrii reziduí (je přítomná nelineární závislost) ani jejich normalitu.
plot(quadratic_boston_lm)
plot(cubic_boston_lm)
plot(splines_boston_lm)
par(opar)
### Vybereme model 'splines_boston_lm', ale provedeme pro něj navíc logaritmickou transformaci odezvy. ###
opar <- par(mfrow=c(2,2))
logsplines_boston_lm <- lm(log(medv) ~ bs(nox,knots=c(0.695),degree=1,Boundary.knots=c(0.385, 0.8710)), data = newBoston)
summary(logsplines_boston_lm)
# Logaritmizací odezvy jsme se docíleli zvětšení koeficientu determinace a zlepšení tvaru Q-Q plotu.
plot(logsplines_boston_lm)
### (4) Splines. ###
splines_boston_lm <- lm(medv ~ bs(nox,knots=c(0.695),degree=1,Boundary.knots=c(0.385, 0.8710)), data = newBoston)
summary(splines_boston_lm)
par(opar)
### Nakreslíme si Scatter Plot s konfidenčními a prediction intervaly na hladine významnosti 5 %: ###
new_conf = predict(logsplines_boston_lm, newdata = new_nox, interval = "confidence", level=0.95)
new_pred = predict(logsplines_boston_lm, newdata = new_nox, interval = "prediction", level=0.95)
boston_simple_final_p1<- ggplot(newBoston, aes(x=nox, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Nitrogen Oxides") +
coord_cartesian(xlim=c(0.3850, 0.8710), ylim=c(1.5, 4))
boston_simple_final_p1
boston_simple_final_p1<- ggplot(newBoston, aes(x=nox, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0.3850,0.8710,0.0009925), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Nitrogen Oxides Concentration (parts per 10 million)") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Nitrogen Oxides Concentration") +
coord_cartesian(xlim=c(0.3850, 0.8710), ylim=c(1.5, 4))
boston_simple_final_p1
### Plot efektů: ###
plot(allEffects(logsplines_boston_lm))
### Shapiro-Wilk Normality Test: ###
shapiro.test(residuals(logsplines_boston_lm))
### Plot efektů: ###
plot(allEffects(logsplines_boston_lm))
### Shapiro-Wilk Normality Test: ###
shapiro.test(residuals(logsplines_boston_lm))
### Lilliefors (Kolmogorov-Smirnov) test for normality: ###
library(nortest)
lillie.test(residuals(logsplines_boston_lm)) # Analogicky.
dev.off()
boston_all_lm <- lm(log(medv) ~ ., data = newBoston)
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
par(opar)
summary(boston_all_lm)  # Model se všemi proměnnými najednou je přetížený.
### Pro výběr ze všech možných vysvětlujících proměnných použijeme balík 'leaps' a kritéria Cp/r2. ###
summary(newBoston)
leapsstatCp <- leaps(x=newBoston[,c(1:13)], y=newBoston[,14], names=names(newBoston)[c(1:13)], method="Cp")
leapsstatr2 <- leaps(x=newBoston[,c(1:13)], y=newBoston[,14],
names=names(newBoston)[c(1:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
r2Params <- leapsstatr2$size; r2Values <- leapsstatr2$r2
opar <- par(mfrow=c(1,2))
plot(CpValues ~ CpParams)
plot(r2Values ~ r2Params)
par(opar)
# Vybereme proměnné s indexy 1, 5, 6, 8, 9, 10, 11, 13 (podle grafů je vidět, že existují i lepší
# modely, ale chceme dobrý poměr cena/výkon.
names(Boston)[c(1, 5, 6, 8, 9, 10, 11, 13)]
leaps <- regsubsets(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, data = newBoston, nbest=10)
boston_lm_final <- lm(log(medv) ~ crim + nox + rm + dis + rad + tax + ptratio + lstat, data = newBoston)
boston_lm_AIC <- stepAIC(boston_lm_final)
summary(boston_lm_AIC) # AIC už nic nevyhodí - všechny zvolené proměnné jsou signifikantní.
# Na grafu Residuals vs. Fitted lze pozorovat symetrii.
op <- par(mfrow=c(2,2))
plot(boston_lm_final)
par(opar)
# Z Shapiro-Wilkova testu neplyne normalita reziduí.
shapiro.test(residuals(boston_lm_final))
# Breusch-Paganův test ukazuje na heteroskedascicitu.
bptest(boston_lm_final)
# Z diagramu níže a z tvaru kovarianční matice vyplývá, že mezi
# vybranými proměnnými není významná kolinearita. Vzhledem ke korelacím
# ostatních proměnných si dovolíme říct, že proměnné byly vybrány relativně dobře.
# Lze ale mezi zvolenými proměnnými pozorovat jakousi nelineární závislost.
pairs(medv ~ rm + ptratio + lstat, data = newBoston)
cor(cbind(newBoston$crim,newBoston$zn,newBoston$indus,newBoston$chas,newBoston$nox,
newBoston$rm,newBoston$age,newBoston$dis,newBoston$rad,newBoston$tax,
newBoston$black,newBoston$ptratio,newBoston$lstat))
# Inflace variance pro vybraný model je příliš velká pro proměnné 'rad' a 'tax'.
vif(boston_lm_final)
# Zkusíme ubrat proměnnou 'rad':
boston_lm_final <- update(boston_lm_final, . ~ . - rad)
vif(boston_lm_final)
# vif už dává dobrý výsledek, ale na druhou stranu teď proměnná 'tax' už není signifikantní.
summary(boston_lm_final)
boston_lm_final <- update(boston_lm_final, . ~ . - tax)
# Tedy ji také z finálního modelu ubereme.
summary(boston_lm_final)
# Index podmíněnosti je o hodně menší 30
# (wiki: "If the condition number is above 30, the regression
# may have significant multicollinearity").
kappa(cor(cbind(newBoston$crim, newBoston$nox, newBoston$rm, newBoston$dis,
newBoston$ptratio, newBoston$lstat)),exact=T)
# Zvolený model zahrnuje v sobě proměnnou 'nox'.
summary(boston_lm_final)
opar <- par(mfrow=c(2,2))
plot(boston_lm_final)
par(opar)
exp_beta1 <- exp(coef(boston_lm_final)[3]*0.1)
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+0.1, ...]/E[Y|X=x, ...].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
### Výsledný model:
summary(boston_lm_final)
op <- par(mfrow=c(2,2))
plot(boston_lm_final)
par(opar)
sigmaHat(boston_lm_final)
# Z Shapiro-Wilkova testu neplyne normalita reziduí.
shapiro.test(residuals(boston_lm_final))
# Breusch-Paganův test ukazuje na heteroskedascicitu.
bptest(boston_lm_final)
# Podívejme se na partial-regression grafy:
avPlots(model_final_crim)
# Podívejme se na partial-regression grafy:
avPlots(boston_lm_final)
