library(lattice)
library(MASS)
library(car)
library(leaps)
require(ISLR)
require(graphics)
setwd("~/Studies/REAN/tutorials/07")
n=100
p=4
X1    = rep(1, times=n)
X2    = rnorm(n,20,3)
X3    = 10+rexp(n,0.1)
X4    = 5+rbinom(n,15,0.2)
beta0 = matrix(c(5,3,2,-5),nrow =4 , ncol = 1)
e     = rnorm(n,0,4)
X0    = cbind(X1,X2,X3,X4)
Y     = X0%*%beta0 + e
X     = cbind(X2,X3,X4)
# Create data.frame
data0 = data.frame(cbind(Y,X))
names(data0) = c("Y","X2","X3","X4")
pairs(data0)
summary(data0)
# LM model 0
m0 = lm(Y ~ X)
summary(m0)
op <- par(mfrow=c(2,2))
plot(m0)
par(op)
# Add good outlying point
X_0 = rbind(X,c(max(X[,1])+20,max(X[,2])+30,max(X[,3])+20))
Y_0 = cbind(rep(1, times=(n+1)),X_0)%*%beta0
plot(Y_0~X_0[,2],xlab = "X",ylab = "Y", main = "Simple Regression with at least one influential point")
m_0 = lm(Y_0 ~ X_0[,2])
summary(m_0)
op <- par(mfrow=c(2,2))
plot(m_0)
par(op)
plot(Y_0~X_0[,2],xlab = "X",ylab = "Y", main = "Simple Regression with at least one influential point")
abline(m_0)
Y_0 = rbind(Y,100)
plot(Y_0~X_0[,2],xlab = "X",ylab = "Y", main = "Simple Regression with at least one influential point")
m_0 = lm(Y_0 ~ X_0[,2])
summary(m_0)
op <- par(mfrow=c(2,2))
plot(m_0)
par(op)
plot(Y_0~X_0[,2],xlab = "X",ylab = "Y", main = "Simple Regression with at least one influential point")
abline(m_0)
Y_2 = Y
Y_2[c(12,22,32)]
Y_2[12] = 3*Y_2[12]
Y_2[22] = -3*Y_2[22]
Y_2[32] = 5*Y_2[32]
m2 = lm(Y_2 ~ X)
summary(m2)
op <- par(mfrow=c(2,2))
plot(m2)
par(op)
# Ridge regression using independent variables
ridge <- lm.ridge(Y ~ X1+X2+X3, lambda = seq(0, .1, .001))
n    = 50      # Sample size
X1   = rnorm(n,10,1)
X2   = rnorm(n,20,2)
X3   = runif(n)-1
X3c  = X1 + X3           # New variable - collinearity
X3cc = X1 + 0.5*X2 +X3   # New variable - multicollinearity
e    =rnorm(n,0,4)
Y    = X1 + X2 + e
# Ridge regression using independent variables
ridge <- lm.ridge(Y ~ X1+X2+X3, lambda = seq(0, .1, .001))
summary(ridge)
select(ridge)
plot(ridge)
ridgec <- lm.ridge (Y ~ X1+X2+X3c, lambda = seq(0, 1, .1))
plot(ridgec)
select(ridgec)
ridgec <- lm.ridge (Y ~ X1+X2+X3c, lambda = seq(0, 10, .1))
plot(ridgec)
ridge.final <- lm.ridge (Y ~ X1+X2+X3c, lambda = 0.4)
ridge.final
summary(ridge.final)
ridge.final
# Final model uses lambda=0.4
ridge.final <- lm.ridge (Y ~ -1 + X1+X2+X3c, lambda = 0.4)
ridge.final
summary(ridge.final)
X1 <- rnorm(20,10,1)
X2 <- rnorm(20,mean=X1,sd=.01)
Y  <- rnorm(20,mean=5+x1+x2)
lm(Y~X1+X2)$coef
lm.ridge(Y~X1+X2,lambda=1)
Y  <- rnorm(20,mean=5+X1+X2)
lm(Y~X1+X2)$coef
lm.ridge(Y~X1+X2,lambda=1)
# PCA - simple ilustration
?USArrests
head(USArrests)
dim(USArrests)
pairs(USArrests, panel = panel.smooth, main = "USArrests data")
?prcomp
prcomp(USArrests)                   # inappropriate
prcomp(USArrests, scale = TRUE)     # appropriate, due to vary by orders of magnitude
prcomp(~ Murder + Assault + Rape, data = USArrests, scale = TRUE)
plot(prcomp(USArrests))
summary(prcomp(USArrests, scale = TRUE))
biplot(prcomp(USArrests, scale = TRUE))
Credit <- read.table("Credit.csv", sep =",", header = T )
Credit_out <- read.table("Credit_out.csv", sep =",", header = T )
? Credit
summary(Credit)
# for example ...
pairs(Credit)
pairs(Credit[,c(2:7,12)])
pairs(Credit[,c(2:7,12)])
# for example ...
pairs(Credit)
step(lm(Balance ~ (.), data=Credit[,c(2:12)]))
summary(lm(Balance ~ Student + Limit, data=Credit))
heads(Credit)
head(Credit)
model1 <- lm(Balance ~ Income + Limit)
model1 <- lm(Balance ~ Income + Limit, data = Credit)
model1_out <- lm(Balance ~ Income + Limit, data = Credit_out)
plot(model1)
?par
op <- par(mfrow=c(2,2))
plot(model1)
model2 <- lm(Balance ~ Income, data = Credit)
model1 <- lm(Balance ~ Income + Limit, data = Credit)
model2 <- lm(Balance ~ Income, data = Credit)
model1_out <- lm(Balance ~ Income + Limit, data = Credit_out)
model2_out <- lm(Balance ~ Income, data = Credit_out)
op <- par(mfrow=c(2,2))
plot(model2)
plot(model1_out)
plot(model2_out)
plot(model1)
plot(model2)
model2 <- lm(Balance ~ Limit, data = Credit)
plot(model2)
par(op)
plot(model1)
par(op)
AIC(model1)
# for example ...
pairs(Credit)
pairs(Credit[,c(2:7,12)])
AIC(lm(Balance ~ Income + Limit + Rating))
AIC(lm(Balance ~ Income + Limit + Rating, data = Credit))
step(lm(Balance ~ Income + Limit + Rating, data = Credit))
step(lm(Balance ~ -1 Income + Limit + Rating, data = Credit))
step(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit))
stepAIC(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit))
?step
stepAIC(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), direction="both")
stepAIC(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), direction="forward")
step(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), direction="both")
s <- step(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), direction="both")
summary(s)
s$anova
s <- step(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), Balance ~ ., direction="both")
summary(s)
s <- step(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), Balance ~ Rating, direction="both")
s <- step(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), Balance ~ Rating+Income+Limit, direction="both")
s <- step(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), Balance ~ Limit, direction="both")
s <- step(lm(Balance ~ -1 + Income + Limit + Rating, data = Credit), Balance ~ Rating, direction="both")
library(leaps)
summary(credit)
summary(Credit)
dim(Credit)
leapsstatCp <- leaps(x=Credit[,2:4], y=Credit[,12], names=names(Credit)[2:4], method="Cp")
CpParams <- leapsstatCp$size
CpValues <- leapsstatCp$Cp
plot(CpValues ~ CpParams)
leaps<-regsubsets(Balance~Income + Rating + Limit,data=Credit,nbest=10)
summary(leaps)
plot(leaps,scale="Cp")
dev.off()
plot(leaps,scale="Cp")
subsets(leaps, statistic="cp")
subsets(leaps, statistic="Cp")
subsets(leaps, statistic="rss")
subsets(leaps, statistic="bic")
model_final <- lm(Balance ~ Income + Rating, data = Credit)
par(c(2,2))
op <- par(c(2,2))
?op
plot(model_final)
model_final <- lm(Balance ~ Income + Rating, data = Credit)
op <- par(c(2,2))
plot(model_final)
op <- par(c(2,2))
dev.off()
op <- par(c(2,2))
plot(model_final)
op <- par(mfrow=c(2,2))
plot(model_final)
