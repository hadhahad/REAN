crPlots(lin_boston_lm)
### (3) Kvadratická polynomiální transformace. ###
quadratic_boston_lm <- lm(medv ~ poly(crim, degree=2, raw=TRUE), Boston)
summary(quadratic_boston_lm)
new_boston_quadratic <- predict(quadratic_boston_lm, newdata = new_crime)
crPlots(cubic_boston_lm)
### (4) Kubická polynomiální transformace. ###
cubic_boston_lm <- lm(medv ~ poly(crim, degree=3, raw=TRUE), Boston)
summary(cubic_boston_lm)  # Je vidět, že proměnná se stupněm 3 už není tak signifikantní.
new_boston_cubic <- predict(cubic_boston_lm, newdata = new_crime)
crPlots(cubic_boston_lm)  # Neliší se od předchozího crPlots pro kvadratickou transformaci.
### (5) Splines. ###
splines_boston_lm <- lm(medv ~ bs(crim,knots=c(12, 25),degree=1,Boundary.knots=c(0,90)), Boston)
summary(splines_boston_lm)
new_boston_splines <- predict(splines_boston_lm, newdata = new_crime)
splinestransf_plot <- ggplot(Boston, aes(x=crim, y=medv)) +
geom_point(size=1, alpha=0.7) +
geom_line(aes(x=new_crime, y=new_boston_piecewise, colour="Piecewise Regression Line")) +
geom_line(aes(x=new_crime, y=new_boston_linear, colour="Linear Transformation")) +
geom_line(aes(x=new_crime, y=new_boston_quadratic, colour="Quadratic Transformation")) +
geom_line(aes(x=new_crime, y=new_boston_cubic, colour="Cubic Transformation")) +
geom_line(aes(x=new_crime, y=new_boston_splines, colour="Splines Transformation")) +
labs(color="Lines:") +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Mean Value of Owner-Occupied Homes") +
ggtitle("Transformations of the Dependant Variable - Boston Dataset") +
coord_cartesian(xlim=c(0, 90), ylim=c(0, 50))
splinestransf_plot
### Vybereme model 'splines_boston_lm', ale provedeme pro něj navíc logaritmickou transformaci odezvy. ###
opar <- par(mfrow=c(2,2))
logsplines_boston_lm <- lm(log(medv) ~ bs(crim,knots=c(12,25),degree=1,Boundary.knots=c(0,90)), Boston)
summary(logsplines_boston_lm)
plot(logsplines_boston_lm)
par(opar)
### Nakreslíme si Scatter Plot s konfidenčními a prediction intervaly na hladine významnosti 5 %: ###
new_crime <- data.frame(crim = seq(0,90,0.1779))
new_conf = predict(logsplines_boston_lm, newdata = new_crime, interval = "confidence", level=0.95)
new_pred = predict(logsplines_boston_lm, newdata = new_crime, interval = "prediction", level=0.95)
boston_crime_final_p1<- ggplot(Boston, aes(x=crim, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Criminality") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 4))
boston_crime_final_p1
cvPlots(model_final_crim)
?cvPlots
avPlots(model_final_crim)
summary(model_final)  # Vidíme, že se trochu zvětšil koeficient determinace.
summary(model_final_crim)
summary(model_final)  # Vidíme, že se trochu zvětšil koeficient determinace.
boston_crime_final_p2<- ggplot(Boston, aes(x=lstat, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Criminality - Final Model") +
coord_cartesian(xlim=c(0, 38), ylim=c(1, 4))
boston_crime_final_p2
### Nakreslíme si Scatter Plot s konfidenčními a prediction intervaly na hladine významnosti 5 %: ###
new_data <- data.frame(rm = seq(3,10,0.01385), ptratio = seq(11,23,0.02375),
lstat = seq(0.10,38,0.075), crim = seq(0,90,0.1779))
new_conf = predict(model_final_crim, newdata = new_data, interval = "confidence", level=0.95)
new_pred = predict(model_final_crim, newdata = new_data, interval = "prediction", level=0.95)
boston_crime_final_p2<- ggplot(Boston, aes(x=lstat, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Criminality - Final Model") +
coord_cartesian(xlim=c(0, 38), ylim=c(1, 4))
boston_crime_final_p2
boston_crime_final_p2<- ggplot(Boston, aes(x=ptratio, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Criminality - Final Model") +
coord_cartesian(xlim=c(0, 38), ylim=c(1, 4))
boston_crime_final_p2
boston_crime_final_p2<- ggplot(Boston, aes(x=ptratio, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Criminality - Final Model") +
coord_cartesian(xlim=c(11, 23), ylim=c(1, 4))
boston_crime_final_p2
boston_crime_final_p2<- ggplot(Boston, aes(x=rm, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Criminality - Final Model") +
coord_cartesian(xlim=c(3, 10), ylim=c(1, 4))
boston_crime_final_p2
ptratio
boston_crime_final_p2<- ggplot(Boston, aes(x=ptratio, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Criminality - Final Model") +
coord_cartesian(xlim=c(11, 23), ylim=c(1, 4))
boston_crime_final_p2
boston_crime_final_p2<- ggplot(Boston, aes(x=crim, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Mean Value of Owner-Occupied Homes vs. Criminality - Final Model") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 4))
boston_crime_final_p2
install.packages("termplot")
library(termplot)
plot(log(medv) ~ rm + ptratio + lstat + crim, data = newdata)
new_pred = predict(model_final_crim, newdata = new_data)
new_pred
line(new_pred)
line(new_pred)
abline(new_pred)
new_pred
new_data
new_pred <- predict(model_final_crim, newdata = new_data)
new_pred
new_pred[,1]
new_pred[1] <- predict(model_final_crim, newdata = new_data)
new_pred[1]
crim_predicion <- predict(model_final, newdata=new_data)
crim_predicion
### Nakreslíme si Scatter Plot s konfidenčními a prediction intervaly na hladine významnosti 5 %: ###
new_data <- data.frame(rm=5, ptratio=15,
lstat=20, crim=10)
crim_predicion <- predict(model_final, newdata=new_data)
crim_predicion
### Nakreslíme si Scatter Plot s konfidenčními a prediction intervaly na hladine významnosti 5 %: ###
new_data1 <- data.frame(rm=5, ptratio=15, lstat=20, crim=10)
new_data2 <- data.frame(rm=5, ptratio=15, lstat=20, crim=11)
### Nakreslíme si Scatter Plot s konfidenčními a prediction intervaly na hladine významnosti 5 %: ###
new_data1 <- data.frame(rm=5, ptratio=15, lstat=20, crim=10)
new_data2 <- data.frame(rm=5, ptratio=15, lstat=20, crim=11)
crim_predicion1 <- predict(model_final_crim, newdata=new_data1)
crim_predicion2 <- predict(model_final_crim, newdata=new_data2)
crim_predicion1
crim_predicion2
crim_predicion2/crim_predicion1
(1-crim_predicion2/crim_predicion1)*100
(1-crim_predicion2/crim_predicion1)
(1-crim_predicion2/crim_predicion1)*100
exp_bet123 <- exp(coef(model_final_crim)[2]+coef(model_final_crim)[3]+coef(model_final_crim)[4]+coef(model_final_crim)[5])
exp_bet123
exp_bet123 <- exp(coef(model_final_crim)[5])
exp_bet123
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+1]/E[Y|X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_bet123)*100
### Nakreslíme si Scatter Plot s konfidenčními a prediction intervaly na hladine významnosti 5 %: ###
new_data1 <- data.frame(rm=5, ptratio=15, lstat=20, crim=10)
new_data2 <- data.frame(rm=5, ptratio=15, lstat=20, crim=11)
crim_predicion1 <- predict(model_final_crim, newdata=new_data1)
crim_predicion2 <- predict(model_final_crim, newdata=new_data2)
(1-crim_predicion2/crim_predicion1)*100
crim_predicion2/crim_predicion1
(1-crim_predicion2/crim_predicion1)
### Nakreslíme si Scatter Plot s konfidenčními a prediction intervaly na hladine významnosti 5 %: ###
new_data1 <- data.frame(rm=5, ptratio=15, lstat=20, crim=11)
new_data2 <- data.frame(rm=5, ptratio=15, lstat=20, crim=12)
crim_predicion1 <- predict(model_final_crim, newdata=new_data1)
crim_predicion2 <- predict(model_final_crim, newdata=new_data2)
(1-crim_predicion2/crim_predicion1)*100
?avPlots
# Podívejme se na partial-regression grafy:
avPlots(model_final_crim)
logboston_lm
### (1) Uděláme logaritmickou transformaci odezvy 'medv'. ###
logboston_lm <- lm(log(medv)~ crim, Boston)
summary(logboston_lm)
# Koeficient determinace se zvýšil, p-value ukazuje na signifikantnost proměnných.
opar <- par(mfrow=c(2,2))
plot(logboston_lm)
par(opar)
### (2) Graf s regresní křivkou pro nový model a konfidenčními intervaly na hladině významnosti 5%: ###
# V daném případě konfidenční interval neposkytuje skoro žádnou užitečnou informaci,
# prediction interval obsahuje v sobě většinu pozorování.
new_crime <- Boston.frame(crim = seq(0,90,0.1779))
new_conf = predict(logboston_lm, newdata = new_crime, interval = "confidence", level=0.95)
new_pred = predict(logboston_lm, newdata = new_crime, interval = "prediction", level=0.95)
logtrans_p1<- ggplot(Boston, aes(x=crim, y=log(medv))) +
geom_point(size=1, alpha=0.7) +
labs(color="Lines:") +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,1], colour = "Fit")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,2], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_conf[,3], colour = "Confidence Interval")) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,2], colour = "Prediction Interval"), linetype=2) +
geom_line(aes(x=seq(0,90,0.1779), y=new_pred[,3], colour = "Prediction Interval"), linetype=2) +
theme_bw() +
xlab("Per Capita Crime Rate by Town") +
ylab("Log - Mean Value of Owner-Occupied Homes") +
ggtitle("Linear Model with Log-Transformation of the Dependant Variable (Tolerance - 5%)") +
coord_cartesian(xlim=c(0, 90), ylim=c(1, 4))
logtrans_p1
### (3) Porovnáme naši transformaci s transformací navrženou Box-Coxem: ###
dev.off()
# Log-věrohodnostní profil Box-Coxovy transformace:
boxcox(boston_lm)
# Nový model s použitím Box-Coxovy transformace.
boston_lm_bc <- update(boston_lm, . ~ . + boxCoxVariable(medv))
summary(boston_lm_bc)
summary(logboston_lm)
# Je vidět, že přidání (signifikantní) Box-Coxovy proměnné zlepšilo původní model bez transformací:
# zvětšil se koeficient determinace, přičemž je přibližně dvakrát větší než u modelu s logaritmickou transformací.
# Při záměně (ne přidání) vysvětlující proměnné Box-Coxovou výsledek je o něco horší.
# Added-Variable Plots taky ukazují na schopnost nového modelu aproximovat data, ale tato aproximace je daleká od ideální.
avPlots(boston_lm_bc)
# Nakonec se podíváme na chování reziduí obou modelů:
opar <- par(mfrow=c(2,2))
plot(boston_lm_bc)  # Box-Coxova transformace
plot(logboston_lm)  # Logaritmická transformace odezvy
par(opar)
# Ještě jednou se podívejme na logaritmickou transformaci odezvy 'medv':
logtrans_p1
exp_beta1 <- exp(coef(logboston_lm)[2])  # Je kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+1]/E[Y|X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
new_data1 <- data.frame(crim=11)
new_data2 <- data.frame(crim=12)
crim_predicion1 <- predict(logboston_lm, newdata=new_data1)
crim_predicion2 <- predict(logboston_lm, newdata=new_data2)
(1-crim_predicion2/crim_predicion1)*100
exp_beta1 <- exp(coef(logboston_lm)[2])  # Je kladné číslo menší než jedna vyjádřující poměr E[Y|X=x+1]/E[Y|X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_beta1)*100
exp_bet1 <- exp(coef(model_final_crim)[5])
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_bet123)*100
exp_bet1 <- exp(coef(model_final_crim)[5])
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_bet123)*100
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_bet1)*100
exp_bet1
### Výsledný model:
summary(model_final)
ggplot(newdata, aes(sample = residuals(model_final)))
ggplot(newdata, aes(sample = residuals(model_final))) +
+ stat_qq(color="firebrick2", alpha=1)
ggplot(newdata, aes(sample = residuals(model_final))) +
stat_qq(color="firebrick2", alpha=1) +
geom_abline(intercept = mean(residuals(model_final)), slope = sd(residuals(model_final)))
plot(model_final)
plot(model_final)
op <- par(mfrow=c(2,2))
plot(model_final)
newdata <- newdata[-c(366,413,215,406)]
dev.off()
boston_all_lm <- lm(log(medv) ~ ., newdata)
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
par(opar)
summary(boston_all_lm)  # Model se všemi proměnnými najednou je přetížený.
### Pro výběr ze všech možných vysvětlujících proměnných použijeme balík 'leaps' a kritéria Cp/r2. ###
summary(newdata)
leapsstatCp <- leaps(x=newdata[,c(1:13)], y=newdata[,14], names=names(newdata)[c(1:13)], method="Cp")
leapsstatr2 <- leaps(x=newdata[,c(1:13)], y=newdata[,14], names=names(newdata)[c(1:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
r2Params <- leapsstatr2$size; r2Values <- leapsstatr2$r2
opar <- par(mfrow=c(1,2))
plot(CpValues ~ CpParams)
plot(r2Values ~ r2Params)
par(opar)
# Vybereme proměnné s indexy 4, 5, 6, 8, 11, 13 (podle grafů je vidět, že existují i lepší
# modely, ale chceme dobrý poměr cena/výkon.
names(Boston)[c(4, 5, 6, 8, 11, 13)]
leaps <- regsubsets(log(medv) ~ chas + nox + rm + dis + ptratio + lstat, newdata, nbest=10)
summary(leaps)
opar <- par(mfrow=c(2,2))
plot(leaps,scale="Cp")
plot(leaps,scale="adjr2")
subsets(leaps, statistic="bic")
subsets(leaps, statistic="adjr2")
par(opar)
dev.off()
### Nakonec zvolíme model s proměnnými r-p-l. ###
model_final <- lm(log(medv) ~ rm + ptratio + lstat, newdata)
# Otestujeme náš výběr pomocí 'step' (Akaike).
summary(step(model_final))  # Z AIC vyplývá, že všechny vybrané proměnné jsou signifikantní.
summary(model_final)  # F-statistic také dává dobrý výsledek.
# Na grafu Residuals vs. Fitted lze pozorovat symetrii.
op <- par(mfrow=c(2,2))
plot(model_final)
summary(as.factor(Boston$medv[Boston$medv<20]))
summary(as.factor(Boston$medv[Boston$medv>=20 & Boston$medv<=40]))
summary(as.factor(Boston$medv[Boston$medv>=40]))
median(Boston$medv)
# Tabulka četností jednotlivých hodnot odezvy 'medv' ukazuje na to, že
# by hodnoty rovné 50 mohly vzniknout useknutím nebo chybně.
# Proto si je dovolíme odstranit.
newdata <- Boston[which(Boston$medv != 50),]
median(newdata$medv) # Po odstranění zmíněných hodnot se hodnota mediánu skoro nezmeníla.
mm <- lm(medv ~ ., data = newdata)
sort(residuals(mm))
newdata <- newdata[-c(366,413,215,406),]
dev.off()
boston_all_lm <- lm(log(medv) ~ ., newdata)
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
par(opar)
summary(boston_all_lm)  # Model se všemi proměnnými najednou je přetížený.
View(newdata)
View(newdata)
# Tabulka četností jednotlivých hodnot odezvy 'medv' ukazuje na to, že
# by hodnoty rovné 50 mohly vzniknout useknutím nebo chybně.
# Proto si je dovolíme odstranit.
newdata <- Boston[which(Boston$medv != 50),]
dim(newdata)
# Tabulka četností jednotlivých hodnot odezvy 'medv' ukazuje na to, že
# by hodnoty rovné 50 mohly vzniknout useknutím nebo chybně.
# Proto si je dovolíme odstranit.
newdata <- Boston[which(Boston$medv != 50),]
dim(newdata)
mm <- lm(medv ~ ., data = newdata)
sort(residuals(mm))
newdata <- newdata[-c(366,413,215,406),]
dim(newdata)
newdata
newdata <- newdata[-c(366,413,215,406),]
dev.off()
boston_all_lm <- lm(log(medv) ~ ., newdata)
opar <- par(mfrow=c(2,2))
plot(boston_all_lm)
par(opar)
summary(boston_all_lm)  # Model se všemi proměnnými najednou je přetížený.
### Pro výběr ze všech možných vysvětlujících proměnných použijeme balík 'leaps' a kritéria Cp/r2. ###
summary(newdata)
leapsstatCp <- leaps(x=newdata[,c(1:13)], y=newdata[,14], names=names(newdata)[c(1:13)], method="Cp")
leapsstatr2 <- leaps(x=newdata[,c(1:13)], y=newdata[,14], names=names(newdata)[c(1:13)], method="r2")
CpParams <- leapsstatCp$size; CpValues <- leapsstatCp$Cp
r2Params <- leapsstatr2$size; r2Values <- leapsstatr2$r2
opar <- par(mfrow=c(1,2))
plot(CpValues ~ CpParams)
plot(r2Values ~ r2Params)
par(opar)
# Vybereme proměnné s indexy 4, 5, 6, 8, 11, 13 (podle grafů je vidět, že existují i lepší
# modely, ale chceme dobrý poměr cena/výkon.
names(Boston)[c(4, 5, 6, 8, 11, 13)]
### Výsledný model:
summary(model_final)
op <- par(mfrow=c(2,2))
plot(model_final)
ggplot(newdata, aes(sample = residuals(model_final))) +
stat_qq(color="firebrick2", alpha=1) +
geom_abline(intercept = mean(residuals(model_final)), slope = sd(residuals(model_final)))
ggplot(newdata, aes(sample = residuals(model_final))) +
stat_qq(color="firebrick2", alpha=1) +
geom_abline(intercept = mean(residuals(model_final)), slope = sd(residuals(model_final)))
residuals(model_final)
ggplot(newdata, aes(sample = residuals(model_final))) +
stat_qq(color="firebrick2", alpha=1) +
geom_abline(intercept = mean(residuals(model_final)), slope = sd(residuals(model_final)))
dim(residuals(model_final))
length(residuals(model_final))
### Nakonec zvolíme model s proměnnými r-p-l. ###
model_final <- lm(log(medv) ~ rm + ptratio + lstat, newdata)
length(residuals(model_final))
### Nakonec zvolíme model s proměnnými r-p-l. ###
model_final <- lm(log(medv) ~ rm + ptratio + lstat, newdata)
# Otestujeme náš výběr pomocí 'step' (Akaike).
summary(step(model_final))  # Z AIC vyplývá, že všechny vybrané proměnné jsou signifikantní.
summary(model_final)  # F-statistic také dává dobrý výsledek.
# Na grafu Residuals vs. Fitted lze pozorovat symetrii.
op <- par(mfrow=c(2,2))
plot(model_final)
par(opar)
# Z Shapiro-Wilkova testu neplyne normalita reziduí.
shapiro.test(residuals(model_final))
# Breusch-Paganův test ukazuje na heteroskedascicitu.
bptest(model_final)
# Z diagramu níže a z tvaru kovarianční matice vyplývá, že mezi
# vybranými proměnnými není významná kolinearita. Vzhledem ke korelacím
# ostatních proměnných si dovolíme říct, že proměnné byly vybrány relativně dobře.
# Lze ale mezi zvolenými proměnnými pozorovat jakousi nelineární závislost.
pairs(medv ~ rm + ptratio + lstat, data = newdata)
cor(cbind(newdata$crim,newdata$zn,newdata$indus,newdata$chas,newdata$nox,
newdata$rm,newdata$age,newdata$dis,newdata$rad,newdata$tax,
newdata$black,newdata$ptratio,newdata$lstat))
# Inflace variance pro vybraný model také není velka (mnohem menší <1.7).
vif(model_final)
# Index podmíněnosti je o hodně menší 30
# (wiki: "If the condition number is above 30, the regression
# may have significant multicollinearity").
kappa(cor(cbind(newdata$rm,newdata$ptratio,newdata$lstat)),exact=T)
# Zvolený model nezahrnuje v sobě kriminalitu.
# Pro účely zadání Q14 ji přidáme.
model_final_crim <- update(model_final, . ~ . + crim)
summary(model_final)  # Vidíme, že se trochu zvětšil koeficient determinace.
summary(model_final_crim)
opar <- par(mfrow=c(2,2))
plot(model_final_crim)
par(opar)
# Podívejme se na partial-regression grafy:
avPlots(model_final_crim)
exp_bet1 <- exp(coef(model_final_crim)[5])
# Je to kladné číslo menší než jedna vyjádřující poměr E[Y|U,V,X=x+1]/E[Y|U,V,X=x].
# Tedy (1-exp_beta1)*100 % vyjadřuje o kolik procent klesne cena nemovitosti při nárustu míry kriminality o 1 jendotku.
(1-exp_bet1)*100
median(newdata$crim)
### Výsledný model:
summary(model_final)
op <- par(mfrow=c(2,2))
plot(model_final)
par(opar)
ggplot(newdata, aes(sample = residuals(model_final))) +
stat_qq(color="firebrick2", alpha=1) +
geom_abline(intercept = mean(residuals(model_final)), slope = sd(residuals(model_final)))
### Výsledný model:
summary(model_final)
op <- par(mfrow=c(2,2))
plot(model_final)
plot(allEffects(model_final))
plot(allEffects(model_final_crim))
?allEffects
# Z použití funkce 'summary' vyplývá, že v datovém souboru nejsou chybějicí hodnoty (NA), navíc
# lze také vidět základní charakteristiky proměnných.
summary(Boston)
### Načtení potřebných knihoven ###
needed.libraries <- c('data.table','car','MASS','ggplot2','ISLR','graphics','effects','lattice','segmented','leaps','splines')
for(libs in needed.libraries) require(libs, character.only = TRUE)
? Boston
head(Boston)
# Z použití funkce 'summary' vyplývá, že v datovém souboru nejsou chybějicí hodnoty (NA), navíc
# lze také vidět základní charakteristiky proměnných.
summary(Boston)
# Rozměry datového souboru jsou 506x14, což odpovídá rozměrům uvedeným v zadání zápočtové úlohy.
dim(Boston)
# Z použití funkce 'summary' vyplývá, že v datovém souboru nejsou chybějicí hodnoty (NA), navíc
# lze také vidět základní charakteristiky proměnných.
describe(Boston)
### Načtení potřebných knihoven ###
needed.libraries <- c('data.table','car','MASS','ggplot2','ISLR','graphics','effects','lattice','segmented','leaps','splines','psych')
for(libs in needed.libraries) require(libs, character.only = TRUE)
install.packages("psych")
### Načtení potřebných knihoven ###
needed.libraries <- c('data.table','car','MASS','ggplot2','ISLR','graphics','effects','lattice','segmented','leaps','splines','psych')
for(libs in needed.libraries) require(libs, character.only = TRUE)
# Z použití funkce 'summary' vyplývá, že v datovém souboru nejsou chybějicí hodnoty (NA), navíc
# lze také vidět základní charakteristiky proměnných.
describe(Boston)
install.packages("psych")
install.packages("psych")
install.packages("psych")
install.packages("psych")
install.packages("psych")
# Histogram a odhad hustoty pro odezvu 'medv'.
hist(Boston$medv, freq=F, main="", xlab="Median Value of Owner-Occupied Homes in $1000s.",xlim=c(0, 55), ylim=c(0, 0.07))
lines(density(Boston$medv), col="red", lwd=2)
install.packages("psych")
# Histogram a odhad hustoty pro odezvu 'medv'.
hist(Boston$medv, freq=F, main="Density Estimation", xlab="Median Value of Owner-Occupied Homes in $1000s.",xlim=c(0, 55), ylim=c(0, 0.07))
lines(density(Boston$medv), col="red", lwd=2)
